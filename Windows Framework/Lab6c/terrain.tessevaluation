#version 400 core

layout(triangles, equal_spacing, ccw) in;
in vec2 tcUV[];
in vec3 tcworldPosition[];
in vec3 tcnormal[];
in vec3 tcvertNorm[];
in vec3 tcglobalPos[];

out vec2 UV;
out vec3 worldPosition;
out vec3 normal;
out vec3 vertNorm;
out vec3 globalPos;

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 normalMatrix;
uniform sampler2D texture3;
uniform float mapWidth;
uniform float magnitude;
uniform float xmul;
uniform float ymul;

void main()
{
    vec4 p0 = gl_TessCoord.x * gl_in[0].gl_Position;
    vec4 p1 = gl_TessCoord.y * gl_in[1].gl_Position;
    vec4 p2 = gl_TessCoord.z * gl_in[2].gl_Position;

	vec4 pos = (p0 + p1 + p2);
	
	vec4 gp0 = gl_TessCoord.x * vec4(tcglobalPos[0], 1.0);
	vec4 gp1 = gl_TessCoord.y * vec4(tcglobalPos[1], 1.0);
	vec4 gp2 = gl_TessCoord.z * vec4(tcglobalPos[2], 1.0);

	vec4 gPos = (gp0 + gp1 + gp2);

//	float u = (mapWidth*(-xmul) + gPos.x*xmul + gPos.x*(1+xmul))+1.0;
//	float v = (mapWidth*(-ymul) + gPos.z*ymul + gPos.z*(1+ymul))+1.0;

//	float u = fract(gPos.x/mapWidth)*mapWidth;
//	float v = fract(gPos.z/mapWidth)*mapWidth;

//	u = fract((u+1)/(mapWidth+2));
//	v = fract((v+1)/(mapWidth+2));

	float u = gPos.x - xmul;
	float v = gPos.z - ymul;

	u = (u+1)/(mapWidth+2);
	v = (v+1)/(mapWidth+2);


	pos.y  = (texture(texture3, vec2(u, v)).a-0.5)*magnitude*2;
//	pos.y  = (texture(texture3, vec2(gPos.x/mapWidth, gPos.z/mapWidth)).a-0.5)*magnitude*2;

    gl_Position = projectionMatrix * modelViewMatrix * pos;

	vec2 uv0 = gl_TessCoord.x * tcUV[0];
	vec2 uv1 = gl_TessCoord.y * tcUV[1];
	vec2 uv2 = gl_TessCoord.z * tcUV[2];

//	UV = (uv0 + uv1 + uv2);
	UV = gPos.xz/4;

	worldPosition = vec3(modelViewMatrix * pos);

    vec3 n0 = gl_TessCoord.x * tcnormal[0];
    vec3 n1 = gl_TessCoord.y * tcnormal[1];
    vec3 n2 = gl_TessCoord.z * tcnormal[2];

//	vec3 norm = texture(texture3, vec2(gPos.x/mapWidth, gPos.z/mapWidth)).rgb-0.5;
	vec3 norm = texture(texture3, vec2(u, v)).rgb-0.5;
//	vec3 factors = vec3(mapWidth, magnitude * 2, mapWidth);
//	norm = norm * factors;
	norm = normalize(norm);
	normal = vec3(normalMatrix * vec4(norm, 1.0));

	vertNorm = norm;

	globalPos = vec3(pos);

}