#version 330 core


in vec2 UV;
in vec3 worldPosition;
in vec3 normal;
in vec3 vertNorm;

// Ouput data
out vec4 color;

uniform sampler2D texture1;

struct Light {
	vec4 position;
	vec4 colour;
	int type;
};
uniform Light lights[8];
uniform int numLights;


void main()
{
	//  hardcoded shininess
	float shininess = 300;

	//  Our texture colour
	vec3 texcolour = texture2D( texture1, UV ).rgb;
	vec3 skyblue = vec3(0.529, 0.8078, 0.98);

	vec3 diffuse = vec3(0.0, 0.0, 0.0);
	vec3 ambient = vec3(0.0, 0.0, 0.0);
	vec3 specular = vec3(0.0, 0.0, 0.0);
	vec3 lightcolour = vec3(0.0, 0.0, 0.0);


	lightcolour = vec3(lights[0].colour);

	ambient = ambient + (skyblue * lightcolour * ((lights[0].colour.a)/0.1)) + (texcolour * lightcolour * (1-((lights[0].colour.a)/0.1)));
	vec3 fragToLight;

	float dist;


	fragToLight = normalize(vec3(lights[0].position))*-1.0;
	dist = 0;


	vec3 surfaceNormal = normalize(normal);
	vec3 fragToView = normalize(-worldPosition);


	float diffuseContribution = max(0.0, dot(surfaceNormal, fragToLight));
	diffuseContribution = pow(diffuseContribution, 3);

	diffuse = diffuse + (skyblue * lightcolour * diffuseContribution);

	vec3 lightReflection = reflect(fragToLight, surfaceNormal);

	float specularContribution = max(0.0, dot(-lightReflection, fragToView));
	specularContribution = pow(specularContribution, shininess);

	specular = specular + (lightcolour * specularContribution);

	color = vec4(ambient + diffuse + specular, 1.0);
	
}